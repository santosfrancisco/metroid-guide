{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from \"react\";\nimport Layout from '../components/layout';\nimport Check from '../components/check';\nvar SM_LOCALSTORAGE_KEY = 'sm_map_checks';\nvar SM_TOTAL = 100;\n\nvar SuperMetroidMap = function SuperMetroidMap() {\n  var wrapperRef = useRef(null);\n  var checkRef = useRef(null);\n\n  var _useState = useState([]),\n      checks = _useState[0],\n      setChecks = _useState[1];\n\n  var _useState2 = useState(0),\n      count = _useState2[0],\n      setCount = _useState2[1];\n\n  var handleClick = function handleClick(event) {\n    if (event.target !== checkRef.current && wrapperRef.current && wrapperRef.current.contains(event.target)) {\n      var currentChecks = checks;\n      var date = new Date();\n      setChecks([].concat(_toConsumableArray(currentChecks), [{\n        idx: date.getTime(),\n        top: event.pageY,\n        left: event.pageX\n      }]));\n    }\n  };\n\n  var handleRemove = function handleRemove(id) {\n    var currentChecks = checks;\n    currentChecks.splice(currentChecks.findIndex(function (check) {\n      return check.idx === id;\n    }), 1);\n    setChecks(_toConsumableArray(currentChecks));\n  };\n\n  useEffect(function () {\n    document.addEventListener(\"mousedown\", handleClick);\n    return function () {\n      document.removeEventListener(\"mousedown\", handleClick);\n    };\n  });\n  useEffect(function () {\n    if (checks.length) localStorage.setItem(SM_LOCALSTORAGE_KEY, _JSON$stringify(checks));\n  }, [checks]);\n  useEffect(function () {\n    var checks = localStorage.getItem(SM_LOCALSTORAGE_KEY);\n\n    if (checks) {\n      var initialChecks = JSON.parse(checks) || [];\n      setChecks(initialChecks);\n      setCount(initialChecks.length);\n    }\n  }, []);\n  return __jsx(Layout, {\n    pageTitle: \"Super Metroid map\"\n  }, __jsx(\"img\", {\n    ref: wrapperRef,\n    src: \"/super-metroid/super-metroid-map.gif\",\n    alt: \"map\"\n  }), checks.map(function (check, idx) {\n    return __jsx(Check, {\n      ref: checkRef,\n      key: \"\".concat(idx).concat(check.top),\n      idx: check.idx,\n      top: check.top,\n      left: check.left,\n      handleClick: handleRemove\n    });\n  }));\n};\n\nexport default SuperMetroidMap;","map":null,"metadata":{},"sourceType":"module"}